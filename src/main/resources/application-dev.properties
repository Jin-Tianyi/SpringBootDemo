#控制台打印当前环境中生效的自动配置和未生效的自动配置
#debug=true
#logging.level.com.jty.prj.jblog.JblogApplicationTests=trace


#quartz 定时任务
# Quartz提供两种基本作业存储类型
# --->第一种类型叫做RAMJobStore:
#     最佳的性能，因为内存中数据访问最快
#     不足之处是缺乏数据的持久性，当程序路途停止或系统崩溃时，所有运行的信息都会丢失
# --->第二种类型叫做JDBC作业存储:
#     通过调整其quartz.properties属性文件，持久化任务调度信息
#     使用数据库保存任务调度信息后，即使系统崩溃后重新启动，任务的调度信息将得到恢复
#


#============================================================================
# 基础配置
#============================================================================

# 设置调度器的实例名(instanceName) 和实例ID (instanceId)
# 注意：如果使用JobStoreTX，实例名严禁使用：DefaultQuartzScheduler
# 原因：内存方式的instanceid为默认的DefaultQuartzScheduler，如果不修改系统会同时存在内存型和DB型，默认会走内存
org.quartz.scheduler.instanceName: MyQuartzScheduler
#如果使用集群，instanceId必须唯一，设置成AUTO
org.quartz.scheduler.instanceId = AUTO

org.quartz.scheduler.rmi.export: false
org.quartz.scheduler.rmi.proxy: false
org.quartz.scheduler.wrapJobExecutionInUserTransaction: false

#============================================================================
# 调度器线程池配置
#============================================================================

org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
# 指定多少个工作者线程被创建用来处理 Job
org.quartz.threadPool.threadCount: 10
# 设置工作者线程的优先级（最大值10，最小值1，常用值5）
org.quartz.threadPool.threadPriority: 5
# 加载任务代码的ClassLoader是否从外部继承
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true

org.quartz.jobStore.misfireThreshold: 60000

#============================================================================
# Configure JobStore 作业存储配置
#============================================================================

# 默认配置，数据保存到内存(调度程序信息是存储在被分配给JVM的内存里面，运行速度快)
#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore

# 持久化配置（存储方式使用JobStoreTX，也就是数据库）
org.quartz.jobStore.class:org.quartz.impl.jdbcjobstore.JobStoreTX
# 驱动器方言
org.quartz.jobStore.driverDelegateClass:org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 使用自己的配置文件
org.quartz.jobStore.useProperties:true

#数据库中quartz表的表名前缀
org.quartz.jobStore.tablePrefix:qrtz_
org.quartz.jobStore.dataSource:myQuartzDB

#是否使用集群（如果项目只部署到 一台服务器，就不用了）
org.quartz.jobStore.isClustered = false

#============================================================================
# Configure Datasources配置数据源(可被覆盖，如果在schedulerFactoryBean指定数据源)
#============================================================================

org.quartz.dataSource.myQuartzDB.driver:com.mysql.cj.jdbc.Driver
org.quartz.dataSource.myQuartzDB.URL:jjdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true
org.quartz.dataSource.myQuartzDB.user:root
org.quartz.dataSource.myQuartzDB.password:123456
org.quartz.dataSource.myQuartzDB.maxConnections:10



#quartz job execute time
job2.cron:0/20 * * * * ?